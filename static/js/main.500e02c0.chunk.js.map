{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCDQC,G,MAAW,SAAAR,GAEpB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPdM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBAAOZ,UAAW,SAASa,KAAK,SAASF,YAAcA,EAAaG,SAAWF,MC0CpEG,G,wDArCb,aAAe,IAAD,8BAEZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IANH,E,qDAUd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAWc,S,oBAG/C,WAAU,IAAD,SACyBE,KAAKR,MAA9BR,EADA,EACAA,SAAUS,EADV,EACUA,YACXQ,EAAmBjB,EAASkB,QAAQ,SAAAvB,GAAO,OAChDA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEjD,OAEK,sBAAK3B,UAAU,MAAf,UACE,wDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA/BZO,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.500e02c0.chunk.js","sourcesContent":["import React from 'react'; \n\nimport './card.styles.css'; \n\nexport const Card = (props) => (\n    <div className='card-container'>\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n     <h2> { props.monster.name } </h2>\n     <p> {props.monster.email} </p>\n\n    </div>\n)","import React from 'react'; \n\nimport {Card} from '../card/card.component';\n\nimport './card-list-style.css'\n\n\nexport const CardList = props => {\n    \n    return <div className='card-list'> \n        {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n        ))}\n    </div>; \n}","import React from 'react'; \n\nimport './search-box.styles.css'; \n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\n    <input className= 'search' type='search' placeholder= {placeholder} onChange= {handleChange}/>\n\n);","\nimport {Component} from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\n\nimport {SearchBox} from './components/search-box/search-box.component'; \n\nimport './App.css';\n\nclass App extends Component{\n\n  constructor() {\n\n    super(); \n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }; \n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters : users}))\n  }\n\n render() {\n   const {monsters, searchField} = this.state; \n   const filteredMonsters = monsters.filter( monster => \n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n   return (\n\n        <div className=\"App\">\n          <h1> Monsters Rolodex cool</h1>\n          <SearchBox \n          placeholder='Search monsters'\n          handleChange = {e => this.setState({ searchField: e.target.value})}\n          />\n          <CardList monsters={filteredMonsters} /> \n          \n        </div>\n        \n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}